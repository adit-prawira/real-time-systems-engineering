#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <sys/iofunc.h>
#include <pthread.h>
#include <unistd.h>

#define MESSAGE_SIZE 2
#define BUF_SIZE 100
#define FILE_LOCATION "/tmp/trafficLightServer.info"
//#define FILE_LOCATION "/net/clientAditya/tmp/trafficLightServer.info"

typedef struct {
	int serverProcessId;
	int serverChannelId;
}serverIds;

typedef struct {
	struct _pulse header;
	int clientId;
	volatile char messageChar;
}messageData;

typedef struct {
	struct _pulse header;
	char buf[BUF];
}replyData;

// This function will perform direct mutation to serverIds
// and store the current process pid number and channel id during channel creation to the typedef
// and will store it into a file in the location described by FILE_LOCATION
void writeServerInfo(serverIds *ids){
	FILE *file;
	file = fopen(FILE_LOCATION, "w+");
	if(file != NULL){
		ids->serverProcessId = getpid();
		ids->serverChannelId = ChannelCreate(_NTO_CHF_DISCONNECT);
		int dataNum = fwrite(ids, sizeof(serverIds), 1, file);
		printf("Successfully store %d data to server info file\n", dataNum); // logs success file writing process
	}else{
		ids->serverChannelId = 0;
		ids->serverProcessId = 0;
		printf("ERROR: Cannot create server info file\n");
	}
	fclose(file);
}

void *server(void *data){

}

int main(void) {
	serverIds ids;
	writeServerInfo(&ids);

	return EXIT_SUCCESS;
}
