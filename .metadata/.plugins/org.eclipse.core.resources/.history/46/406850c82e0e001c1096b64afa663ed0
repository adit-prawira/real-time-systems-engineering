#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <sys/iofunc.h>
#define BUF_SIZE 100

typedef struct {
	struct _pulse header;
	int clientId;
	int data;
}messageData; // message data struct as type definition

typedef struct {
	struct _pulse header;
	char buf[BUF_SIZE];
}reply;

int server();

int main(int argc, char *argv[]) {
	printf("Server side running...\n");
	int returnValue = 0;
	returnValue = server();
	printf("Server side terminating...\n");
	return EXIT_SUCCESS;
}

int server(){
	int serverProcessID = 0, channelID = 0;
	serverProcessID = getpid();
	channelID = ChannelCreate(_NTO_CHF_DISCONNECT); // the flag will be utilise to allow detach

	if(channelID == -1){
		// the case where channel ID is not defined/found
		printf("ERROR: Failed to create communication channel\n");
		return EXIT_FAILRE;
	}

	printf("Server side listening to Client on:\n");
	printf("------> Process ID: %d\n", serverProcessID);
	printf("------> Channel ID: %d\n", channelID);

	messageData message;
	int receiveID, messageNum = 0;
	int stayAlive = 0, living = 0;

	reply replayMessage;
	replayMessage.header.type = 0x01;
	replayMessage.header.subtype = 0x00;
	living = 1;
	while(living){
		receiveId = MsgReceive(channelId, &message, sizeof(message), NULL);
		if(receiveId == -1){
			// if the server does not receive message from client exit early
			printf("ERROR: Failed to receive message\n");
			break;
		}

		// Pulse
		if(receiveId == 0){}else if(receiveId > 0){}else{}
	}
	return EXIST_SUCCESS;
}
