#include <stdio.h>
#include <stdlib.h>
#include <semaphore.h>
typedef struct {
	int a;
	int b;
	int result;
	int result2;
	int useCount;
	int useCount2;
	int maxUse;
	int maxUse2;
	sem_t semaphore;
}appData;
/*
  userThread Specification (protected with semaphore):
 *Pass appData structure to a thread and use variable a and b 100 times whenever a is set to 5.
 *Use a local "uses" variable to count 100 of our uses.
 *Increment application's useCount in case someone else want to keep track of how many times
  our data has been used
 *Add a small usleep to make sure the scheduler gives the other threads a chance to run.
*/
void *userThread(void *data){
	int uses = 0;
	appData *threadData = (appData*)data;
	while(uses < threadData->maxUse){
		sem_wait(&threadData->semaphore);
		if(threadData->a == 5){
			threadData->result += (threadData->a) + (threadData->b);
			threadData->useCount ++;
			uses++;
		}
		sem_post(&threadData->semaphore);
		usleep(1);
	}
	return 0;
}
int main(void) {
	puts("Hello World!!!"); /* prints Hello World!!! */
	return EXIT_SUCCESS;
}
