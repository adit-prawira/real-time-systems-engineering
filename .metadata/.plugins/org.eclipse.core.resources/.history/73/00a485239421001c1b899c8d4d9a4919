#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <errno.h>
#include <sys/dispatch.h>
#include <sys/syspage.h>

#define ATTACH_POINT "/net/CTC/dev/name/local/CTC"
#define BUF_SIZE 100
#define N_ITERATIONS 10
typedef union{
	union{
		_Uint32t sival_int;
		void *sival_ptr;
	};
	_Uint32t dummy[4];
}_CustomSignalValue;

typedef struct _CustomPulse{
	_Uint16t type;
	_Uint16t subtype;
	_Int8t code;
	_Uint8t zero[3];
	_CustomSignalValue value;
	_Uint8t zero2[2];
	_Int32t serverConnectionId;
}msg_header_t;

typedef struct {
	msg_header_t header;
	int clientId;
	int data;
}MessageData;

typedef struct {
	msg_header_t header;
	char buf[BUF_SIZE];
}ReplyData;

typedef struct {
	MessageData message;
	ReplyData reply;
	pthread_mutex_t mutex;
	pthread_cond_t condVar;
}SensorData;
int client(char *serverName);

int main(int agrc, char *argv[]) {
	printf("_CustomSignalValue = %d bytes\n", sizeof(_CustomSignalValue));
	printf("msg_header_t = %d bytes\n", sizeof(msg_header_t));
	printf("MessageData = %d bytes\n", sizeof(MessageData));
	printf("ReplyData = %d bytes\n", sizeof(ReplyData));
	char hostname[100];
	memset(hostname, '\0', 100);
	hostname[99] = '\n';
	gethostname(hostname, sizeof(hostname));

	puts("STARTING: %s is Running...\n", hostname);
	int returnedValue = client(ATTACH_POINT);
	puts("TERMINATING: %s is Terminating...\n", hostname);
	return returnedValue;
}

void MessageDataInit(MessageData *msg, _Uint16t type, _Uint16t subtype, int clientId){
	msg->clientId = clientId;
	msg->header.type = type;
	msg->header.subtype = subtype;
}

int client(char *serverName){
	MessageData message;
	ReplyData reply;
	int serverConnectionId = 0;
	MessageDataInit(&message, 0x22, 0x00, 610);

	serverConnectionId = name_open(serverName, 0);

	if(serverConnectionId == -1)
		// Logs error and exit the program early if it is connection is failed to be performed
		printf("ERROR: Unable to connect to the server with the given name of %s\n", serverName);
		return EXIT_FAILURE;

	printf("SUCCESS: Connected to the server %s\n", serverName);
	for(int i = 0; i < N_ITERATIONS; i++)
		message.data = 10+i;
		printf("SENDING: ClientID(%d) sending value of %d with %d bytes of memory size\n",message.clientId, message.data, sizeof(message));
		if(MsgSend(serverConnectionId, &message, ))

	return EXIT_SUCCESS;
}
