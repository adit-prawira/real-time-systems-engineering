#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <errno.h>
#include <sys/dispatch.h>

#define ATTACH_POINT "/net/CTC/dev/name/local/CTC"
#define BUF_SIZE 100
#define N_ITERATIONS 10
typedef union{
	union{
		_Uint32t sival_int;
		void *sival_ptr;
	};
	_Uint32t dummy[4];
}_CustomSignalValue;

typedef struct _CustomPulse{
	_Uint16t type;
	_Uint16t subtype;
	_Int8t code;
	_Uint8t zero[3];
	_CustomSignalValue value;
	_Uint8t zero2[2];
	_Int32t serverConnectionId;
}msg_header_t;

typedef struct {
	msg_header_t header;
	int clientId;
	int data;
}MessageData;

typedef struct {
	msg_header_t header;
	char buf[BUF_SIZE];
}ReplyData;

typedef struct {
	MessageData message;
	ReplyData reply;
	pthread_mutex_t mutex;
	pthread_cond_t condVar;
}SensorData;
int client(char *serverName);

int main(int agrc, char *argv[]) {
	printf("_CustomSignalValue = %d bytes\n", sizeof(_CustomSignalValue));
	printf("msg_header_t = %d bytes\n", sizeof(msg_header_t));
	printf("MessageData = %d bytes\n", sizeof(MessageData));
	printf("ReplyData = %d bytes\n", sizeof(ReplyData));
	printf("STARTING: Traffic Light Local Controller 1 is Running...\n");
	int returnedValue = client(ATTACH_POINT);
	printf("TERMINATING: Traffic Light Local Controller 1 is Terminating...\n");
	return returnedValue;
}

int client(char *serverName){
	return EXIT_SUCCESS;
}
