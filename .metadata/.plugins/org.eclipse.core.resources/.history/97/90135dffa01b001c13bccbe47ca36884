#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <pthread.h>
#include <string.h>
#include <errno.h>
#define N_ITERATIONS 4

pthread_mutex_t someoneIsBathing;

struct timespec deadline;

void *shower(void * notUsed){
	int returnedCode = pthread_mutex_timedlock(&someoneIsBathing, &deadline);
	if(returnedCode == EOK){
		printf("STATUS IN: Thread with ID %d is in the shower\n", pthread_self());
		sleep(2);
		printf("STATUS OUT: Thread with ID %d is leaving the shower\n", pthread_self());
		pthread_mutex_unlock(&someoneIsBathing);
	}else{
		printf("ERROR: Thread with ID %d Failed to Lock: %s\n", pthread_self(), strerror(returnedCode));
	}
	return 0;
}
int main(void) {
	printf("Timed Bathroom Program Running...\n");

	pthread_t *threadIds;
	threadIds = malloc(sizeof(pthread_t)*N_ITERATIONS);
	pthread_mutex_init(&someoneIsBathing, NULL);
	clock_gettime(CLOCK_REALTIME, &deadline);
	deadline.tv_sec +=1;
	int i = 0;
	for(i = 0; i< N_ITERATIONS; i++){
		pthread_create(&threadIds[i], NULL, shower, NULL);
	}
	for(i = 0; i< N_ITERATIONS; i++){
		pthread_join(threadIds, NULL);
	}

	printf("Main Thread is terminating...\n");
	return EXIT_SUCCESS;
}
