#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <sys/dispatch.h>
#include <pthread.h>
#include <sys/syspage.h>

#define ATTACH_POINT "CTC"
#define BUF_SIZE 100

typedef union{
	union{
		_Uint32t sival_int;
		void *sival_ptr;
	};
	_Uint32t dummy; // dummy variable to create space
}_CustomSignalValue;

typedef struct _CustomPulse{ // Override the standard struct _pulse msg_header_t
	_Uint16t type;
	_Uint16t subtype;
	_Int8t code;
	_Uint8t zero[3]; // same padding used in standard struct _pulse
	_CustomSignalValue value;
	_Uint8t zero2[2]; // added extra padding for enduring alignment access
	_Int32t serverConnectionId;
}msg_header_t;

typedef struct {
	msg_header_t header;
	int clientId;
	int data;
}MessageData;

typedef struct {
	msg_header_t header;
	char buf[BUF_SIZE];
} ReplyData;

typedef struct {
	MessageData message;
	ReplyData reply;
	pthread_mutex_t mutex;
	pthread_cond_t condVar;
}SensorData;

int server();

int main(int argc, char *argv[]){
	printf("_CustomSignalValue = %d bytes\n", sizeof(_CustomSignalValue));
	printf("msg_header_t = %d bytes\n", sizeof(msg_header_t));
	printf("MessageData = %d bytes\n", sizeof(MessageData));
	printf("ReplyData = %d bytes\n", sizeof(ReplyData));
	printf("SensorData = %d bytes\n", sizeof(SensorData));
	char hostname[100];
	memset(hostname, '\0', 100);
	hostname[99] = '\n';
	gethostname(hostname, sizeof(hostname));

	printf("STARTING: %s is Running...\n", hostname);
	int returnedValue = server();
	printf("TERMINATING: %s is Terminating...\n", hostname);
	return EXIT_SUCCESS;
}

void ReplyDataInit(ReplyData *data, _Uint16t type, _Uint16t subtype){
	data->header.type = type;
	data->header.subtype = subtype;
}


int server(){
	name_attach_t *attach;
	MessageData message;
	ReplyData reply;
	int receiveId = 0, isLiving = 0;
	int messageNum = 0, stayAlive = 0;

	ReplyDataInit(&reply, 0x01, 0x00);

	attach = name_attach(NULL, ATTACH_POINT, 0); // creating a global name which is located in /dev/<hostname>/local/<ATTACH_POINT>
	if(attach == NULL){
		// if name is not attached successfully exit the program early
		printf("ERROR: Failed to compute name_attach on ATTACH_POINT: %s\n", ATTACH_POINT);
		printf("----> Another server may run the same ATTACH_POINT name or GNS service has not yet started");
		return EXIT_FAILURE;
	}

	printf("CTC Listening for L1, and L2 on ATTACH_POINT: %s\n", ATTACH_POINT);
	isLiving = 1; // set thread status that it is living as connection has been made;
	while(isLiving){
		receiveId = MsgReceive(attach->chid, &message, sizeof(message), NULL);
		if(receiveId == -1){
			// break the loop early if there is no received message Id returned from MsgReceive
			printf("ERROR: Failed to receive message from MsgReceive\n");
			break;
		}

		// Condition when pulse is received, note that message now has the credentials of clients identity, where in this case are from L1, and L2
		if(receiveId == 0){
			printf("----> CTC Received a pulse from ClientID(%d)\n", message.clientId);
			printf("----> Received Message Header Code: %d\n", message.header.code);
			switch(message.header.code){
			case _PULSE_CODE_DISCONNECT:
				printf("Pulse STATUS CODE: %d\n", _PULSE_CODE_DISCONNECT);
				if(stayAlive == 0){
					// if received pulse to disconnect => disconnect all its connection by running name_close
					// for each name_open()
					ConnectDetach(message.header.serverConnectionId); // pass serverConnectionId to detach
					printf("Detaching: Server is requested to detach from ClientId(%d)\n", message.clientId);
					continue;
				}else{
					printf("Rejected: Server is requested to detach from ClientId(%d) but rejected\n", message.clientId);
				}
				break;
			case _PULSE_CODE_UNBLOCK: // receiveId associated with the blocking message
				// Gives the option to reply back to the client now or later after being hit by a signal or a time out
				printf("\nServer Received: _PULSE_CODE_UNBLOCK after %d messages\n", messageNum);
				break;
			case _PULSE_CODE_COIDDEATH: // Received an ID of a connection that was attached to a destroyed channel
				printf("\nServer Received: _PULSE_CODE_COIDDEATH after %d messages\n", messageNum);
				break;
			case _PULSE_CODE_THREADDEATH: // Received an ID of a thread that just died
				printf("\nServer Received: _PULSE_CODE_THREADDEATH after %d messages\n", messageNum);
				break;
			default:
				printf("\nServer Received: Unrecognized pulse detected after %d messages\n", messageNum);
				break;
			}
		}

		// Condition when message is received from clients
		if(receiveId > 0){
			messageNum++;

			if(message.header.type == _IO_CONNECT){
				// The case when client sending message that GNS service is running/succesfully connected
				MsgReply(receiveId, EOK, NULL, 0); // reply with EOK (a constant that means no error)
				printf("\nClient Send Message: GNS Server is running...\n");
				printf("\n----------> Replying with: EOK('no error')\n");
				messageNum--; // reduce number of messages because it has been replied
				continue; // go back to the start if the loop
			}

			// receiving some other IO => reject it
			if(message.header.type > _IO_BASE && message.header.type <= _IO_MAX){
				MsgError(receiveId, ENOSYS); // Send error of Function isn't implemented (ENOSYS)
				printf("ERROR: CTC received other IO messages and reject it\n");
				continue;

			}
			sprintf(reply.buf, "Message number %d received", messageNum);
			printf("MESSAGE RECEIVED: CTC received %d from ClientId(%d)\n", message.data, message.clientId);

			sleep(1);
			printf("----> REPLYING: '%s'\n",reply.buf);
			MsgReply(receiveId, EOK, &reply, sizeof(reply)); // Send reply to clients (L1, and L2)
		}else{
			printf("ERROR: CTC received unrecognized entity, but unable to handle it properly\n");
		}
	}

	name_detach(attach, 0);
	return EXIT_SUCCESS;
}
