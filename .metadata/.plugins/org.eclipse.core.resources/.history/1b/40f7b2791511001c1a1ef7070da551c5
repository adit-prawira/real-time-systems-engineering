#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <sys/iofunc.h>
#include <sys/netmgr.h>
#include <pthread.h>

//#define FILE_LOCATION "/tmp/trafficLightServer.info"
#define FILE_LOCATION "/net/serverAditya/tmp/trafficLightServer.info"
#define BUF_SIZE 100;

typedef struct{
	int serverProcessId;
	int serverChannelId;
}serverIds;

// return the size of data that has been stored in the read file
// if it fails to read then return 0
size_t read_data( FILE *fp, serverIds *p )
{
    return( fread( p, sizeof( serverIds ), 1, fp ) );
}

// This function will perform direct mutation to accessIds
// and store serverChannelId, and serverProcessId, where those two properties were created by server-side
void getServerIds(serverIds *accessIds){
	FILE *file;
	serverIds ids;
	file = fopen(FILE_LOCATION, "r");
	if(file != NULL && read_data(file, &ids)!= 0){
		accessIds->serverChannelId =ids.serverChannelId;
		accessIds->serverProcessId =ids.serverProcessId;
		printf("Successfully get Server Connection and Channel IDs from file\n"); // logs successfully file opening and read methods
	}else{
		printf("Cannot open the file\n"); // logs unsuccessful file access process
	}
	fclose(file); // close file after performing the process
}


int main(int argc, char *argv[]) {
	serverIds serverAccessIds;
	getServerIds(&serverAccessIds);
	// test if reading process is good
	printf("%d\n", serverAccessIds.serverProcessId);
	printf("%d\n", serverAccessIds.serverChannelId);
	return EXIT_SUCCESS;
}
