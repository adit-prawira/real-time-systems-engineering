#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#define Buffer_size 10
#define Number_of_packets 15
int dataIsReady = 0;
typedef struct {
	char buffer[Buffer_size];
	int readfinnished;
	pthread_mutex_t mutex;
	pthread_cond_t condvar;
}appData;

void *consumer(void *data){
	puts("Consumer thread is running...\n");
	appData *threadConsumer= (appData*) data;
	int index = 0; // read process index position
	char dataValue;
	while(1){
		pthread_mutex_lock(&threadConsumer->mutex);


		while(!dataIsReady){
			pthread_cond_wait(&threadConsumer->condvar, &threadConsumer->mutex);
		}
		// Processing data
		dataValue = threadConsumer->buffer[index];
		printf("consumer: got data from producer : %c\n",
						dataValue);
		index = (++index) % Buffer_size;
		sleep(1);

		dataIsReady = 0;
		pthread_cond_signal(&threadConsumer->condvar);
		pthread_mutex_unlock(&threadConsumer->mutex);
	}
	printf("->Consumer thread finished...");
	return 0;
}

void *producer(void *data){
	puts("Producer thread is running...\n");
	appData *threadProducer = (appData*)data;
	int index = 0;
	char data_value = 'A';
	dataIsReady = 1;
	while(1){
		pthread_mutex_lock(&threadProducer->mutex);
		threadProducer->buffer[index++] = dataValue++;
		threadProducer->buffer[index] = dataValue;
		printf("producer: Data(%c) from stimulated h/w is ready\n",
				threadProducer->buffer[index-1]);
		printf("producer: Data(%c) from stimulated h/w is ready\n",
						threadProducer->buffer[index]);
		printf("currentIndex %d\n", index);
		index = (++index) % Buffer_size;
		printf("circular Index %d\n", index);
		sleep(1);
		while(dataIsReady){
			pthread_cond_wait(&threadProducer->condvar, &threadProducer->mutex);
		}
		dataIsReady=1;
		pthread_cond_signal(&threadProducer->condvar);
		pthread_mutex_unlock(&threadProducer->mutex);
	}
	printf("->Producer thread finished...");
	return 0;
}

int main(int argc, char *argv[]) {
	char hostname[100];
	void *retval;
	pthread_t pThread, cThread;
	appData data = {0, 0, PTHREAD_MUTEX_INITIALIZER, PTHREAD_COND_INITIALIZER};

	printf("Starting consumer/producer (main thread priority:10)...\n");

	pthread_create(&pThread, NULL, producer, &data);
	pthread_create(&cThread, NULL, consumer, &data);

	sleep(Number_of_packets+1);

	puts("\nMain Thread is terminating...\n");
	return EXIT_SUCCESS;
}
