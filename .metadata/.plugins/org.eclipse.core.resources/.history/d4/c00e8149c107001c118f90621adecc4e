#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

pthread_rwlock_t dataSource;
struct resource {
	volatile char byte1;
}data;

void * consumer(void *notused){
	puts("Consumer thread started...");
	char current = 0, new = 0;
	while(1){
		pthread_rwlock_rdlock(&td->dataSource);
			new = data.byte1;
		pthread_rwlock_unlock(&td->dataSource);
		if(new != current){
			printf("Consumer received: %d\n", new);
			current = new;
		}
		sleep(1);
	}
	return 0;
}

void *producer(void * notused){
	puts("Producer thread started...");
	char buf[2] = {};
	printf("Enter e/n:\n");
	while(1){
		gets(buf);// reading keyboard input
		pthread_rwlock_wrlock(&td->dataSource);
			data.byte1 = buf[0];
		pthread_rwlock_unlock(&td->dataSource);
	}
	return 0;
}

int main(int argc, char *argv[]) {
	pthread_t cThread, pThread;
	appData data;
	pthread_rwlock_init(&data.dataSource, NULL);
	pthread_create(&pThread, NULL, producer, NULL);
	pthread_create(&cThread, NULL, consumer, NULL);
	return EXIT_SUCCESS;
}
