#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <sys/dispatch.h>

#define ATTACH_POINT "jaeMamon2801"
#define BUF_SIZE 100

// create private custom union sigval
typedef union{
	union{
		_Uint32t sival_int;
		void *sival_ptr; // will have different size in 32-bit and 64-bit
	};
	_Uint32t dummy[4]; // create dummy variable to create space
}_customSigval;

// replace the standtard (typedef struct _pulse msg_header_t)
typedef struct _CustomPulse{
	_Uint16t type;
	_Uint16t subtype;
	_Int8t code;
	_Uint8t zero[3]; // same padding used in standard _pulse struct
	_customSigval value;
	_Uint8t zero2[2]; // added extra padding for ensuring alignment access
	_Int32t scoid;
}msg_header_t;

typedef struct {
	msg_header_t header;
	int clientId; // unique id from client
	int data;
}appData;

typedef struct {
	msg_header_t header;
	char buf[BUF_SIZE]; // Message that will be send back to send back to other thread
}reply;

// prototype
int server();

int main(int argc, char *argv[]) {
	puts("Server side running...\n");
	int ret = 0;
	ret = server();
	puts("Server side terminating...\n");
	return EXIT_SUCCESS;
}

int server(){
	return EXIT_SUCCESS;
}
