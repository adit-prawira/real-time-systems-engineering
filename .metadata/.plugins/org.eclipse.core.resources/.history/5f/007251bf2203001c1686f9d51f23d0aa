#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <sched.h>
#define Buffer_size 10
#define Number_of_packjets 15

int dataIsReady = 0;

typedef struct {
	char buffer[Buffer_size];
	int readfinnished;
	pthread_mutex_t mutex;
	pthread_cond_t condvar;
}appData;

void *consumer(void *data){
	printf("->Consumer thread started(thread priority:10)...\n");
	appData *threadConsumer= (appData*) data;
	int index = 0;
	char dataValue;
	while(1){
		pthread_mutex_lock(&threadConsumer->mutex);
		while(threadConsumer->readfinnished){
			pthread_cond_wait(&threadConsumer->condvar, &threadConsumer->mutex);
		}
		// Processing data
		dataValue = threadConsumer->buffer[index];
		printf("consumer: got that from producer : %c\n",dataValue);
		index = (++index) % Buffer_size;
		threadConsumer->readfinnished = 1;
		pthread_cond_signal(&threadConsumer->condvar);
		pthread_mutex_unlock(&threadConsumer->mutex);
	}
	printf("\nreadfinnished = %d\n", threadConsumer->readfinnished);
	printf("->Consumer thread finished...\n");
	return 0;
}
void *producer(void *data){
	printf("->Producer thread started(thread priority:10)...\n");
	appData *threadProducer = (appData*)data;
	threadProducer->readfinnished = 0;
	int index = 0;
	char dataValue= 'A';
	while(1){
		pthread_mutex_lock(&threadProducer->mutex);
		threadProducer->buffer[index] = dataValue;
		printf("producer: Data(%c) from stimulated h/w is ready\n",
				threadProducer->buffer[index]);
		index = (++index) % Buffer_size;
		dataValue++;
		index++;
		threadProducer->buffer[index] = dataValue;
		printf("producer: Data(%c) from stimulated h/w is ready\n",
						threadProducer->buffer[index]);
		index = (++index) % Buffer_size;
		sleep(1);

		while(!threadProducer->readfinnished){
			pthread_cond_wait(&threadProducer->condvar, &threadProducer->mutex);
		}
		threadProducer->readfinnished = 0;
		pthread_cond_signal(&threadProducer->condvar);
		pthread_mutex_unlock(&threadProducer->mutex);
	}
	printf("->Producer thread finished...\n");
	return 0;
}

int main(void) {
	pthread_t pthread, cthread;
//	pthread_attr_t ptAttribute, ctAttribute;
//	struct sched_param ptParam, ctParam;
	//void *retval;
	appData data = {{}, 0, PTHREAD_MUTEX_INITIALIZER, PTHREAD_COND_INITIALIZER};
	printf("Starting consumer/producer (main thread priority:10)...\n");
	// create thread with custom priority
//	pthread_attr_init(&ptAttribute);
//	ptParam.sched_priority = 5;
//	pthread_attr_setschedparam(&ptAttribute, &ptParam);
//	pthread_create(&pthread, &ptAttribute, producer, &data);

//	pthread_attr_init(&ctAttribute);
//	ctParam.sched_priority = 2;
//	pthread_attr_setschedparam(&ctAttribute, &ctParam);
//	pthread_create(&cthread, &ctAttribute, consumer, &data);

//	pthread_join(pthread, &retval);
//	pthread_join(cthread, &retval);
	pthread_create(&pthread, NULL, producer, &data);
	pthread_create(&cthread, NULL, consumer, &data);
	sleep(Number_of_packjets);
	printf("\nMain Terminating...\n");
	return EXIT_SUCCESS;
}
