#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <sys/netmgr.h>
#include <sys/neutrino.h>
#include <errno.h>

#define MY_PULSE_CODE _PULSE_CODE_MINAVAIL

char *progName = "timer.c";
enum states{
	state0, state1, state2
};
typedef union{
	struct _pulse pulse;
}my_message_t;
int main(void) {
	puts("Simple State Machine started");
	enum states currentState = state0;
	struct sigevent event;
	struct itimerspec itime;
	timer_t timer_id;
	int chid;
	int rcvid;
	my_messsage_t msg;

	chid = ChannelCreate(0); // Create communication channel
	event.sigev_notify = SIGEV_PULSE;

	// create connection back to ourselves for the timer to send pulse on
	event.sigev_coid = ConnectAttach(ND_LOCAL_NODE, 0, chid, _NTO_SIDE_CHANNEL, 0);
	if(event.sigev_coid == -1){
		printf(stderr, "%s: couldn't ConnectAttach to self!\n", progName);
		perror(NULL);
		exit(EXIT_FAILURE);
	}

	struct sched_param threadParam;
	pthread_getschedparam(pthread_self(), NULL, &threadParam);
	event.sigev_priority = threadParam.sched_curpriority;
	event.sigev_code = MY_PULSE_CODE;

	// create timer, binding it to the event
	if(timer_create(CLOCK_REALTIME, &event, &timer_id) == -1){
		printf(stderr, "%s: couldn't create a timer, errno %d\n", progName, errno);
		perror(NULL);
		exit(EXIT_FAILURE);
	}
	return EXIT_SUCCESS;
}
